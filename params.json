{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Rude Distributed Asset Management\r\n\r\nRude is a distributed asset management system for web projects.\r\n\r\n- rude is a command-line driven\r\n- rude is distributed\r\n- rude plays nicely with git\r\n- rude stores assets in CouchDB\r\n- rude integrates with Amazon S3\r\n\r\nRude keeps your git repositories _lean_ and focused on the code.\r\n\r\n## Problem Statement\r\n\r\nPlatform as a Service (PaaS) providers are increasingly popular nowadays.\r\nThey let programmers focus on development, and leave systems adminstration to dedicated companies.\r\nDeployment is typically triggered by pushing a Git repository to the service provider.\r\n\r\nEither you must choose to include your binary assets in your Git deployment,\r\nor choose to host them elsewhere.\r\nMost people will agree that the foremer solution is not really a solution.\r\nGit retains all data indefinitely, and a repository can quickly bloat into multi-GBs\r\nif you keep shuffling assets in and out.\r\nThe latter solution is very manual and error prone.\r\n\r\nRude is a reliable solution to the above problem.\r\n\r\n## Installation\r\n\r\nInstallation of the Rude package is done via NPM:\r\n\r\n    npm install -g rude\r\n\r\n_Dependencies_:\r\n\r\n- Rude uses a local [CouchDB](http://couchdb.apache.org/) database to store assets.\r\n- **CouchDB must be installed separately**\r\n\r\n### CouchDB on Mac OS X\r\n\r\nWe recommend using [homebrew](http://mxcl.github.com/homebrew/) to install CouchDB.\r\n\r\n    brew install couchdb\r\n\r\nHomebrew will guide you how to make CouchDB auto-start if you require.\r\n\r\n## Assets\r\n\r\nRude manages assets for web projects.\r\n\r\nA web project may contain a lot of images,\r\nvideos, gzipped downloads, etc.\r\nThese are inappropriate for storage in Git.\r\nGit sees a project in its entirety, \r\nand shuffling large binary assets in and out will bloat your repository.\r\nRude lets you separate your assets, \r\nwithout losing the guaruntees afforded by Git.\r\n\r\nRude tracks your assets in a single inventory file that is lean,\r\nand easy to track using Git.\r\n\r\n## How it Works\r\n\r\nRude creates and manages a local file called your **manifest**.\r\nThe manifest is a list of all your asset names, and their SHA-1 hash.\r\nYour program can ask the Rude module for an asset by name,\r\nrude consults the manifest to lookup the assets hash,\r\nthen returns a fully-qualified URL pointing to the matching asset.\r\n\r\nWhen running in development,\r\nRude will store and retreive assets from a local CouchDB database.\r\nWhen your application is ready for production,\r\nRude can upload your entire set of assets to S3, or another web server.\r\n\r\nRude switches where it retreives assets from by consulting the environment variable `RUDE_PREFIX`.\r\nWhen running locally, this is set to `http://localhost:5984`, your local CouchDB instance.\r\n\r\n## Command Line Usage\r\n\r\n> **Status** Alpha\r\n\r\nCreate a new local repository:\r\n\r\n    $ rude init\r\n    [OKAY] New local rude database initialized at http://localhost:5984/rude\r\n\r\nRude expects to be initialized at the root of your Git checkout directory.\r\nThe `init` command is idempotent, calling `init` on an existing project\r\nwill not overwrite an existing setup.\r\n\r\n### Tracking Assets\r\n\r\n> **Status** Alpha\r\n\r\nTrack assets by adding them to the Rude database,\r\nassets are tracked by file name only:\r\n\r\n    $ rude add path/to/file.ext\r\n    [OKAY] New asset added to local database as 'file.ext'\r\n    [INFO] Asset id 012927f794d2462ae6d5b0bcf1ee01bfb16571cc\r\n\r\nAssets are stored in a single bucket; each asset requires a unique name.\r\nRude will error if you attempt to over write an existing asset.\r\nYou can explicitly force updating an asset with `-f`:\r\n\r\n    $ rude add -f path/to/new/file.ext\r\n    [OKAY] Existing asset 'file.ext' replaced\r\n    [INFO] Asset id 7e792aa144129cec0c25b1e2bd55bee50d30b866\r\n\r\nEach time you add or replace an asset, \r\nRude will upate a file at the root of your repository called\r\n`assets.json`.\r\nRude will also upload the asset to your local CouchDB database.\r\n\r\nYour `assets.json` file _should_ be tracked by git,\r\nand is explicitly formatted to make merging easier.\r\nThis file contains explicit pointers to all your assets,\r\neach represented by a unique SHA-1 hash.\r\nSince this file is tracked by git,\r\nRude will always return URLs that match the currently checked out branch.\r\n\r\n- You should not track assets in Git.\r\n\r\n### Rude Manifest\r\n\r\n> **Status** Alpha\r\n\r\nThe Rude manifest is a single file at the root of your Git repository\r\ncalled `assets.json`.\r\nIt is a JSON encoded mapping between asset names to their hash sum.\r\n\r\n    {\r\n        \"helloworld\": \"7e792aa144129cec0c25b1e2bd55bee50d30b866\", \r\n        \"goodbye\": \"f4485f480d8e52aca885ddadbeed186bc2682500\"\r\n    }\r\n\r\nThis file _should_ be tracked in Git, in lieu of tracking the actual assets.\r\n\r\n#### Managing the Assets File with Git\r\n\r\nRude makes no attempt to get into the revision control business.\r\nGit does that very well, and it would be counter-productive to track revisions in two places.\r\nWhat Rude really does is make it _very easy_ to track project assets with git.\r\nRather than adding the large [BLOBs](http://en.wikipedia.org/wiki/Binary_large_object) directly,\r\nyou just add pointers each asset.\r\n\r\n> Rude is just a _pointer resolver_ mapping names to hashes, and hashes to fully-qualified URLs\r\n\r\nSince the assets file is tracked by Git, it is formatted by Rude in a Git-friendly way.\r\nGit tracks changes per-line, so Rude writes one asset per line.\r\nThe file is still valid JSON, just padded with useful whitespace.\r\nA Git diff between revisions will _only_ show the assets that have changed.\r\n\r\n## Project Usage\r\n\r\nAt runtime, your project asks Rude for assets by name,\r\nand Rude returns their URLs.\r\nThe URLs returned depend on runtime configurations.\r\nWhen running locally in development,\r\nRude returns URLs from your local CouchDB database.\r\n\r\n### Node.js\r\n\r\n> **Status** Alpha\r\n\r\nRude will auto-configure itself based on environment variables:\r\n\r\n- Set `RUDE_PREFIX` to your assets server (default `http://localhost:5984/rude`)\r\n- Set `RUDE_ASSETS_FILE` to your asset menifest (default `assets.json`)\r\n\r\nRequire Rude somewhere in your project:\r\n\r\n    var rude = require('rude').config()\r\n    var url  = rude('helloworld')\r\n    \r\n    console.log(url)\r\n\r\nThis will echo something like:\r\n\r\n    http://localhost:5984/rude/7e792aa144129cec0c25b1e2bd55bee50d30b866/helloworld.jpg\r\n\r\n#### Express\r\n\r\nRude integrates fairly well with [Express](https://npmjs.org/package/express) \r\nand [Jade](https://npmjs.org/package/jade).\r\n\r\nRequire Rude and attach it to your Express app:\r\n\r\n    var app  = require('express')()\r\n    var rude = require('rude').config()\r\n    \r\n    app.locals.rude = rude\r\n    \r\n    app.get('/', ...)\r\n\r\nYou can then call Rude from your Jade template wherever you require a link to your asset:\r\n\r\n    body\r\n        img.icon( src=\"#{rude('coming_soon.png')}\", alt=\"Logo\" )\r\n        ...\r\n    \r\nA similar technique can be used in any template language that allows function calls.\r\n\r\n#### Advanced\r\n\r\nYou can also pass in configurations programatically with:\r\n\r\n    var prefix = 'https://server.com/assets'\r\n    var config = JSON.parse(fs.readFileSync('myfile.json'))\r\n    \r\n    var rude = require('rude').config(prefix,config)\r\n    console.log( rude('helloworld') )\r\n\r\nA synchronous read _should_ be okay here, since it's only called on startup.\r\n\r\n## Sharing\r\n\r\n> **Status** Alpha\r\n\r\nA system is not distributed unless without sharing between peers.\r\nRude uses CouchDB replication to synchronize repositories.\r\n\r\nYou can manage replication using CouchDB, or have Rude trigger replication manually:\r\n\r\n    $ rude push https://some-server/rude\r\n\r\nThis will replicate your database changes to the remote server.\r\nYou can pull down changes from the server with \r\n\r\n    $ rude pull https://some-server/rude\r\n\r\n## Production\r\n\r\n> **Status** Alpha\r\n\r\nWhen your project is ready for production,\r\nRude can upload your assets to their appropriate servers, or distribution networks.\r\n\r\n### Amazon S3\r\n\r\nYou must set your AWS credentials using the\r\nenvironment variables `AWS_S3_KEY` and `AWS_S3_SECRET`.\r\n\r\n    $ rude publish s3://region/bucket-name\r\n    [INFO] Uploading to S3\r\n      √ Image1.png\r\n      √ Image2.png\r\n    [DONE] Use environment variable RUDE_PREFIX=https://bucket-name.s3-us-west-2.amazonaws.com\r\n\r\nRegion _must_ be one of the following:\r\n\r\n- `us-standard` (US Standard)\r\n- `us-west-2` (US West Oregon)\r\n- `us-west-1` (US West Northern California)\r\n- `eu-west-1` (EU Ireland)\r\n- `ap-southeast-1` (Asia Pacific Singapore)\r\n- `ap-northeast-1` (Asia Pacific Tokyo)\r\n- `sa-east-1` (South America Sao Paulo)\r\n\r\nFurther more, your region _must_ agree with the region where your bucket has been created.\r\n\r\n### SSH\r\n\r\nSSH publishing requires SSH keys, run:\r\n\r\n    $ rude publish git://server.com:path/to/assets\r\n\r\n## Command Line Tips\r\n\r\nGet the URL of an asset e.g. `asset.png` \r\n\r\n    rude list | grep asset.png | awk -s '{print $4}'\r\n\r\n# Todo\r\n\r\n- set explicit content-types when adding assets\r\n- better errors when trying to re-add an existing asset (give the other name)\r\n- fine-grained replication between CouchDBs\r\n- add ability to format hash-id via `RUDE_PREFIX`\r\n    - e.g. `0000-0000`, `0000/0000`\r\n    - splitting the hashes into multiple subdirectories will make S3 management more sane\r\n\r\n# License\r\n\r\nCopyright (C) 2012 Jacob Groundwater\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","name":"Rude","google":"","tagline":"Distributed Asset Management"}